#!/bin/bash
#
# Usage: update-projects
# Generates stadard_shortcuts anew, if any file in project got changed.

# Stops execution if any command fails.
set -euo pipefail

scriptsDir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

isProjectsStandardRcUpToDate() {
    if [[ "$scriptsDir"/../standard_aliases \
        -nt "$scriptsDir"/../standard_rc ]]; then
        echo "false"
    else
        echo "true"
    fi
}

# Tells wether the generated file standard_shortcuts is up to
# date.
areStandardShortcutsUpToDate() {
    if [[ ~/.standard_rc \
            -nt ~/.standard_aliases/standard_shortcuts ]] \
        || [[ ~/.standard_aliases/standard_aliases \
            -nt ~/.standard_aliases/standard_shortcuts ]] \
        || [[ "$scriptsDir"/generate-shortcuts \
            -nt ~/.standard_aliases/standard_shortcuts ]] \
        || [[ "$scriptsDir"/update-project \
            -nt ~/.standard_aliases/standard_shortcuts ]] \
        || [[ "$scriptsDir"/parse-rc.py \
            -nt ~/.standard_aliases/standard_shortcuts ]]; then
        echo "false"
    else
        echo "true"
    fi
}

isListOfFunctionsUpToDate() {
    if [[ "$scriptsDir"/../standard_rc \
            -nt "$scriptsDir"/../FUNCTION_DESCRIPTIONS.md ]] \
        || [[ "$scriptsDir"/generate-table-for-readme.py \
            -nt "$scriptsDir"/../FUNCTION_DESCRIPTIONS.md ]]; then
        echo "false"
    else
        echo "true"
    fi
}

main() {
    if [[ $(areStandardShortcutsUpToDate) == "false" ]]; then
        "$scriptsDir"/generate-shortcuts
    fi
    if [[ $(isProjectsStandardRcUpToDate) == "false" ]]; then
        newRc=$("$scriptsDir"/update-rc.py)
        echo "$newRc" >  "$scriptsDir"/../standard_rc
    fi
    if [[ $(isListOfFunctionsUpToDate) == "false" ]]; then
        newFunctionDescriptions=$("$scriptsDir"/generate-table-for-readme.py "$scriptsDir")
        echo "$newFunctionDescriptions" >  "$scriptsDir"/../FUNCTION_DESCRIPTIONS.md
    fi
}

main "$@"
